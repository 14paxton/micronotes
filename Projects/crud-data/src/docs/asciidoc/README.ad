= Lab Instructions
:icons: font

== Files Of Interest
- `src/main/java/crud/data/Person.java`
- `src/main/java/crud/data/PersonBootstrap.java`
- `src/main/java/crud/data/PersonController.java`
- `src/main/java/crud/data/PersonRepository.java`
- `src/test/groovy/crud/data/PersonControllerSpec.groovy`

== Introduction

This project provides a REST interface for managing instances of the `Person`
class, a persistent entity.

[source,java]
.src/main/java/crud/data/Person.java
----
include::src/main/java/crud/data/Person.java[indent=0]
----

The project contains a https://micronaut-projects.github.io/micronaut-data/latest/guide/#repositories[Micronaut Data Repository]
interface for communicating with the database.

[source,java]
.src/main/java/crud/data/PersonRepository.java
----
include::src/main/java/crud/data/PersonRepository.java[indent=0]
----

`PersonController` provides the REST interface.

[source,java]
.src/main/java/crud/data/PersonController.java
----
include::src/main/java/crud/data/PersonController.java[indent=0]
----

A Server Event Listener bean seeds the database with application data at startup.

[source,java]
.src/main/java/crud/data/PersonBootstrap.java
----
include::src/main/java/crud/data/PersonBootstrap.java[indent=0]
----

`PersonControllerSpec` exercises part of the REST api.

[source,groovy]
.src/test/groovy/crud/data/PersonControllerSpec.groovy
----
include::src/test/groovy/crud/data/PersonControllerSpec.groovy[indent=0]
----

The following terminal session output demonstrates some of the functionality provided by the app.

[source]
----
$ curl http://localhost:8080/person
[{"firstName":"Geddy","lastName":"Lee","id":1},{"firstName":"Neil","lastName":"Peart","id":2},{"firstName":"Alex","lastName":"Lifeson","id":3}]
$
$ curl -H "Content-Type: application/json" -X POST -d '{"firstName":"David","lastName":"Gilmour"}'  http://localhost:8080/person
{"firstName":"David","lastName":"Gilmour","id":4}
$
$ curl http://localhost:8080/person
[{"firstName":"Geddy","lastName":"Lee","id":1},{"firstName":"Neil","lastName":"Peart","id":2},{"firstName":"Alex","lastName":"Lifeson","id":3},{"firstName":"David","lastName":"Gilmour","id":4}]
$
$ curl http://localhost:8080/person/3
{"firstName":"Alex","lastName":"Lifeson","id":3}
----

== Exercise

This exercise consists of creating 2 new Micronaut projects.  One of those projects will provide a REST api
similar to the API described above.  The other project will consume that API using a `@Client` interface.

=== The Data Backend Service

Start by creating a Data Backend Service similar to this `data-crud` project.  The managed entity does not need to be
`Person`.  Define any entity you like.  It is recommended that you keep the model simple with just 2 or 3
properties.  Having more than that will make the exercise more tedious than it needs to be and won't contribute to an
improved understanding of the Micronaut capabilities being exercised.

Visit https://launch.micronaut.io[Micronaut Launch] and https://micronaut.io/launch?type=DEFAULT&name=backend&package=com.ocitraining&javaVersion=JDK_8&lang=JAVA&build=GRADLE&test=SPOCK&features=discovery-consul&features=data-jdbc&features=h2&version=3.2.6[create a project named
`backend` with the `discovery-consul`, `data-jdbc`, and `h2` features, select
Java 8, Gradle as the build tool and Spock as the testing tool].

Alternatively, if you have the Micronaut CLI installed you can create the project
with the following:

[source]
----
mn create-app backend --features data-jdbc,h2,discovery-consul -t spock
----

The backend service project should include the same types of artifacts contained in the `data-crud` project.

* Entity
* Data Repository
* Controller
* Bootstrap Event Handler
* Controller Test (optional)

=== The Front End Service

The front end service will provide a controller which sends requests to the backend service via a `@Client` interface.
This front end service does not need to introduce any new capabilities on top of the backend service.  The front end
service will behave as a sort of proxy service to the backend to demonstrate how to have a service communicate with
another.

https://micronaut.io/launch?type=DEFAULT&name=frontend&package=com.ocitraining&javaVersion=JDK_8&lang=JAVA&build=GRADLE&test=SPOCK&features=discovery-consul&version=3.2.6[Create the front end project with the `discovery-consul` feature].

[source]
----
mn create-app --features discovery-consul frontend
----

== Notes

The front end service will be making calls to the backend service so both need to be running concurrently.  In order for
that to work they will need to be listening on different ports.

The backend service should register itself with Consul and the frontend service should locate the backend service via
Consul.


